# demo_analysis_lib
# Contains the interface for items in the library.

from numpy import uint32, uint16, float32, uint8
from typing import List, Dict
from enum import Enum

from demo_analysis_lib.entities import Player, World, Sentry, Dispenser, Teleporter
from demo_analysis_lib.events import Kill

class Vector:
    """3D vector / point"""
    def __init__(x:float32, y:float, z:float) -> Vector: ...
    
    @property
    def x(self) -> float32: ...
    @x.setter
    def x(self, value): ...
    @property
    def y(self) -> float32: ...
    @y.setter
    def y(self, value): ...
    @property
    def z(self) -> float32: ...
    @z.setter
    def z(self, value): ...

    def dot(self, other: Vector) -> float32: ...
    def dist_to(self, other: Vector) -> float32: ...
    def angle_btwn(self, other: Vector) -> float32: ...
    def abs2(self) -> float32:
        """|v|^2"""
    def len(self) -> float32: ...
    def xy(self) -> VectorXY: ...
    def normalized(self) -> Vector:
        """Doesn't change self; simply returns a vector with the
        same direction but length ~= 1"""

    def cross(self, other: Vector) -> Vector: ...

class VectorXY:
    """2D vector / point"""
    def __init__(x:float32, y:float32) -> VectorXY: ...
    @property
    def x(self) -> float32: ...
    @x.setter
    def x(self, value): ...
    @property
    def y(self) -> float32: ...
    @y.setter
    def y(self, value): ...

    def dot(self, other: VectorXY) -> float32: ...
    def dist_to(self, other: VectorXY) -> float32: ...
    def angle_btwn(self, other: VectorXY) -> float32: ...
    def abs2(self) -> float32:
        """|v|^2"""
    def len(self) -> float32: ...
    def xyz(self) -> Vector: ...
    def normalized(self) -> VectorXY:
        """Doesn't change self; simply returns a vector with the
        same direction but length ~= 1"""

class Class(Enum):
    Other = uint8(0)
    Scout = uint8(1)
    Sniper = uint8(2)
    Soldier = uint8(3)
    Demoman = uint8(4)
    Medic = uint8(5)
    Heavy = uint8(6)
    Pyro = uint8(7)
    Spy = uint8(8)
    Engineer = uint8(9)

class ClassList(List): ...

class Team(Enum):
    Other = uint8(0)
    Spectator = uint8(1)
    Red = uint8(2)
    Blue = uint8(3)

    def is_player(self) -> bool: ...

class Round:
    @property
    def start_tick(self) -> uint32: ...
    @property
    def end_tick(self) -> uint32: ...
    @property
    def winner(self) -> Team: ...

    def is_tie(self) -> bool: ...

class TickData:
    """Contains information about the state of a tick."""
    @property
    def players(self) -> List[Player]: ...

    @property
    def sentries(self) -> List[Sentry]: ...

    @property
    def dispensers(self) -> List[Dispenser]: ...

    @property
    def teleporters(self) -> List[Teleporter]: ...

    @property
    def tick(self) -> uint32: ...

    def get_player_by_entityid(self, entity_id: uint32) -> Player | None: ...
    def get_player_by_userid(self, user_id: uint16) -> Player | None: ...

class DemoData:
    """Contains information for the whole demo."""
    @property
    def demo_filename(self) -> str: ...

    @property
    def map_name(self) -> str: ...

    @property
    def duration(self) -> float32: ...

    @property
    def rounds(self) -> List[Round]: ...

    @property
    def kills(self) -> List[Kill]: ...

    @property
    def tick_states(self) -> Dict[uint32, TickData]: ...

    def round_data(self, round: Round) -> DemoData:
        """Limit the data to a specific round.
        This DOES copy."""