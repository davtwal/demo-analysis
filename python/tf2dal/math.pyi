"""
The 2D and 3D vectors used by the library, including extra functions
necessary for __math__.
"""

from numpy import float32

class Vector:
    """3D vector / point"""
    def __init__(x:float32, y:float32, z:float32) -> Vector: ...
    
    @property
    def x(self) -> float32: ...
    @x.setter
    def x(self, value: float32): ...
    @property
    def y(self) -> float32: ...
    @y.setter
    def y(self, value: float32): ...
    @property
    def z(self) -> float32: ...
    @z.setter
    def z(self, value: float32): ...

    def dot(self, other: Vector) -> float32: ...
    def dist_to(self, other: Vector) -> float32: ...
    def angle_btwn(self, other: Vector) -> float32: ...

    def abs2(self) -> float32:
        """|v|^2"""
        ...

    def len(self) -> float32: ...

    def xy(self) -> VectorXY: ...

    def normalized(self) -> Vector:
        """Doesn't change self; simply returns a vector with the
        same direction but length ~= 1"""
        ...

    def cross(self, other: Vector) -> Vector: 
        """3D cross product."""
        ...

    # Operators
    
    def __add__(self, other: Vector) -> Vector: ...
    def __sub__(self, other: Vector) -> Vector: ...
    def __neg__(self) -> Vector: ...
    def __eq__(self, other: Vector) -> bool:
        """Equality. Basically, if self - other ~= 0."""

    # Scalar multiplication: k*x
    def __mul__(self, other: float32) -> Vector: ...
    def __rmul__(self, other: float32) -> Vector: ...
    def __truediv__(self, other: float32) -> Vector: ...
    def __rtruediv__(self, other: float32) -> Vector: ...

class VectorXY:
    """2D vector / point"""
    def __init__(x:float32, y:float32) -> VectorXY: ...
    @property
    def x(self) -> float32: ...
    @x.setter
    def x(self, value: float32): ...
    @property
    def y(self) -> float32: ...
    @y.setter
    def y(self, value: float32): ...

    def dot(self, other: VectorXY) -> float32: ...
    def dist_to(self, other: VectorXY) -> float32: ...
    def angle_btwn(self, other: VectorXY) -> float32: ...
    def abs2(self) -> float32:
        """|v|^2"""
    def len(self) -> float32: ...
    def xyz(self) -> Vector: 
        """Literally just appends 0 to the Z coordinate."""

    def normalized(self) -> VectorXY:
        """Doesn't change self; simply returns a vector with the
        same direction but length ~= 1"""

    # Operators
    
    def __add__(self, other: VectorXY) -> VectorXY: ...
    def __sub__(self, other: VectorXY) -> VectorXY: ...
    def __neg__(self) -> VectorXY: ...
    def __eq__(self, other: VectorXY) -> bool:
        """Equality. Basically, if self - other ~= 0."""

    # Scalar multiplication: k*x
    def __mul__(self, other: float32) -> VectorXY: ...
    def __rmul__(self, other: float32) -> VectorXY: ...
    def __truediv__(self, other: float32) -> VectorXY: ...
    def __rtruediv__(self, other: float32) -> VectorXY: ...
